#!/usr/bin/env python3

import argparse
import subprocess

internals_txt = '''\
Some commands require the following git config values to be set:
  used.id           Used as the default --for value for, e.g. git fe crs
                    Must consist of letters, numbers, hyphens, and underscores
  workspace.root    The directory where new feature worktrees are added

Git does not have a standard way of attaching metadata to branches, so each
feature begins with an empty metadata commit. Metadata is stored in a git note
(with --ref=fe) on this commit. Each line in this note is of the form KEY=VALUE
where KEY is one of the metadata keys listed below and VALUE does not
begin with whitespace. All whitespace before KEY or between KEY and
VALUE is ignored.

The metadata keys and values are:
  name          The name of the feature (equal to the name of the git branch)
  parent[0]     The name of the parent feature
  parent[1]     The name of the grand-parent feature
    ...         (continues until parent[n]=main)
  owners        The set of feature owners
  reviewers     The set of feature reviewers'''

parser = argparse.ArgumentParser(
    prog='git-fe',
    add_help=False,
    formatter_class=argparse.RawTextHelpFormatter,
    description='Suite of git scripts that implement niceties from Iron'
)

subparsers = parser.add_subparsers(dest='subcommand', metavar='subcommand')

parser_anchor = subparsers.add_parser(
    'anchor',
    help='get or update the "anchor", a reasonable base to diff against'
)

parser_change = subparsers.add_parser('change', help='change feature metadata')

parser_create = subparsers.add_parser(
    'create', help='create a new feature',
    formatter_class=argparse.RawTextHelpFormatter,
    description='''\
The new feature will have the current feature as it's parent and you as its
owner and reviewer'''
)
parser_create.add_argument('name', help='the name of the new feature')

parser_crs = subparsers.add_parser('crs', help='show code review comments')

parser_rebase = subparsers.add_parser(
    'rebase', help='rebase a feature onto its parent',
    formatter_class=argparse.RawTextHelpFormatter,
    description='''\
All subfeatures (i.e. branches which descend from this feature's
metadata commit) will also be rebased'''
)

parser_review = subparsers.add_parser('review', help='review changes')
parser_show = subparsers.add_parser('show', help='show feature metadata')
parser_todo = subparsers.add_parser('todo', help='show what to do next')

parser_internals = subparsers.add_parser('internals', help='read how git-fe works')

args = parser.parse_args()

match args.subcommand:
    case None:
        parser.print_help()
    case 'create':
        parser.print_help()
    case 'internals':
        print(internals_txt)
    case _:
        print(f'{args.subcommand} is not implemented yet')
